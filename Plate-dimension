import cv2
import numpy as np

def find_steel_plate_dimensions(image_path):
    # Read the image from file
    image = cv2.imread(image_path)
    
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply Gaussian blur to reduce noise and improve contour detection
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    
    # Perform edge detection using Canny
    edges = cv2.Canny(blurred_image, threshold1=50, threshold2=150)
    
    # Find contours in the edge-detected image
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter the contours to find the steel plate (assuming it is the largest contour)
    largest_contour = max(contours, key=cv2.contourArea)
    
    # Get the dimensions of the bounding rectangle around the steel plate
    x, y, w, h = cv2.boundingRect(largest_contour)
    
    # Draw the bounding rectangle on the image
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    # Calculate dimensions
    length = w
    width = h
    
    return length, width

# Example usage:
# image_path = 'path/to/your/image.jpg'
# length, width = find_steel_plate_dimensions(image_path)
# if length and width:
#     print(f"Length: {length} pixels, Width: {width} pixels")
#     cv2.imshow('Steel Plate', cv2.imread(image_path))
#     cv2.waitKey(0)
#     cv2.destroyAllWindows()
# else:
#     print("Steel plate not found in the image.")import cv2
import numpy as np

def find_steel_plate_dimensions(image_path):
    # Read the image from file
    image = cv2.imread(image_path)
    
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply Gaussian blur to reduce noise and improve contour detection
    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
    
    # Perform edge detection using Canny
    edges = cv2.Canny(blurred_image, threshold1=50, threshold2=150)
    
    # Find contours in the edge-detected image
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter the contours to find the steel plate (assuming it is the largest contour)
    largest_contour = max(contours, key=cv2.contourArea)
    
    # Get the dimensions of the bounding rectangle around the steel plate
    x, y, w, h = cv2.boundingRect(largest_contour)
    
    # Draw the bounding rectangle on the image
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    # Calculate dimensions
    length = w
    width = h
    
    return length, width

# Example usage:
# image_path = 'path/to/your/image.jpg'
# length, width = find_steel_plate_dimensions(image_path)
# if length and width:
#     print(f"Length: {length} pixels, Width: {width} pixels")
#     cv2.imshow('Steel Plate', cv2.imread(image_path))
#     cv2.waitKey(0)
#     cv2.destroyAllWindows()
# else:
#     print("Steel plate not found in the image.")
